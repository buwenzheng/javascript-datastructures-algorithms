---
globs: "*.js,*.ts,*.jsx,*.tsx"
description: JavaScript和TypeScript代码标准和最佳实践
---

# 代码标准和最佳实践

本规则适用于JavaScript和TypeScript文件，定义了项目的编码规范和最佳实践。

## JavaScript/TypeScript 编码规范

### 命名约定
- 使用camelCase命名变量和函数
- 使用PascalCase命名类和构造函数
- 使用UPPER_CASE命名常量
- 使用描述性的变量名，避免缩写
- 文件名使用kebab-case（如：binary-search.js）

### 代码结构
- 每个文件只导出一个主要的类或函数
- 使用ES6模块语法（import/export）
- 保持函数简洁，遵循单一职责原则
- 添加适当的注释说明复杂逻辑
- 使用JSDoc格式的注释

### 数据结构实现规范
- 所有数据结构都应该有基本的增删查改操作
- 实现toString()方法用于调试和可视化
- 提供clear()方法清空数据结构
- 实现size()或length属性获取元素数量
- 处理空数据结构的边界情况
- 提供迭代器支持（Symbol.iterator）

### 算法实现规范
- 包含时间复杂度和空间复杂度注释
- 提供多种实现方式（递归、迭代等）
- 添加输入验证和边界情况处理
- 提供使用示例和测试用例
- 实现通用的比较函数支持

### 测试要求
- 每个实现都必须有对应的测试文件
- 测试覆盖正常情况、边界情况和异常情况
- 使用描述性的测试名称
- 验证返回值和副作用
- 确保100%的代码覆盖率

### TypeScript特殊要求
- 使用严格的类型检查
- 为所有公共API提供类型定义
- 避免使用any类型
- 使用泛型增强代码复用性
- 利用接口定义复杂的数据结构

### 错误处理
- 使用Error类或其子类抛出异常
- 提供清晰的错误消息
- 对无效输入进行验证
- 文档化可能抛出的异常

## 性能优化建议
- 避免不必要的循环和递归
- 使用适当的数据结构来优化查找和插入操作
- 考虑内存使用效率
- 实现懒加载策略（当适用时）

