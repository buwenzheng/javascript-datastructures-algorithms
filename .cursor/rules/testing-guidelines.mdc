---
globs: "*.spec.js,*.spec.ts,*.test.js,*.test.ts"
description: 测试文件编写指导和最佳实践
---

# 测试指导和最佳实践

本规则适用于所有测试文件，定义了测试编写的规范和最佳实践。

## 测试文件结构

### 文件命名
- 测试文件使用 `.spec.js` 或 `.spec.ts` 后缀
- 与被测试文件保持相同的基础名称
- 例如：`binary-search.js` 对应 `binary-search.spec.js`

### 测试框架
- 使用 **Mocha** 作为测试运行器
- 使用 **Chai** 作为断言库
- 支持JavaScript和TypeScript测试

## 测试组织结构

### 基本模板
```javascript
import 'mocha';
import { expect } from 'chai';
import { FunctionName } from '../../src/js/path/to/module';

describe('功能名称', () => {
  // 测试用例
});
```

### 测试分组
- 使用 `describe` 对相关测试进行分组
- 每个类或函数都应该有自己的 `describe` 块
- 使用中文描述测试组和测试用例

### 测试用例命名
- 使用清晰、描述性的测试名称
- 描述测试的预期行为
- 例如：`it('应该在空数组中返回-1', () => {...})`

## 数据结构测试标准

### 基本操作测试
- 创建和初始化
- 插入操作（push, enqueue, insert等）
- 删除操作（pop, dequeue, remove等）
- 查找操作（find, search, contains等）
- 大小获取（size, length, isEmpty等）
- 清空操作（clear）

### 边界情况测试
- 空数据结构操作
- 单个元素操作
- 最大容量操作（如果适用）
- 无效输入处理

### 状态验证
- 验证数据结构的内部状态
- 验证操作前后的状态变化
- 使用 `toString()` 方法验证结构

## 算法测试标准

### 功能测试
- 正常输入的正确性
- 边界值测试
- 异常输入处理
- 性能基准测试（对于大数据集）

### 排序算法测试
- 空数组测试
- 已排序数组测试
- 逆序数组测试
- 重复元素测试
- 自定义比较函数测试

### 搜索算法测试
- 找到目标元素
- 未找到目标元素
- 第一个和最后一个位置
- 自定义相等比较函数

## 测试工具函数

### 通用测试函数
- 为排序算法提供通用测试套件
- 为搜索算法提供通用测试套件
- 数据生成器函数

### 示例：排序算法测试
```javascript
export function testSortAlgorithm(sortAlgorithm, algorithmName) {
  describe(algorithmName, () => {
    it('应该正确排序空数组', () => {
      expect(sortAlgorithm([])).to.deep.equal([]);
    });
    
    it('应该正确排序非空数组', () => {
      const array = [3, 1, 4, 1, 5, 9, 2, 6, 5];
      const sorted = [1, 1, 2, 3, 4, 5, 5, 6, 9];
      expect(sortAlgorithm(array)).to.deep.equal(sorted);
    });
  });
}
```

## 测试质量要求

### 覆盖率要求
- 代码覆盖率应达到100%
- 分支覆盖率应达到100%
- 功能覆盖率应达到100%

### 测试维护
- 保持测试代码的清洁和可读性
- 及时更新测试用例以反映代码变更
- 删除无用的测试用例

### 性能测试
- 对于算法实现，包含基本的性能测试
- 验证时间复杂度符合预期
- 测试大数据集的处理能力

